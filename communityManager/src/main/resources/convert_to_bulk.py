import json

# Input file generated by the "Community Document JSON Data Generator" Canvas
input_filename = "community_data.json"
# Output file in the format required by Elasticsearch Bulk API
output_filename = "community_data_bulk.json"

# Define the target Elasticsearch index name
ELASTICSEARCH_INDEX_NAME = "communities" # As defined in your @Document(indexName = "communities")

print(f"Converting '{input_filename}' to '{output_filename}' for Elasticsearch Bulk API...")

try:
    with open(input_filename, "r") as infile, open(output_filename, "w") as outfile:
        data = json.load(infile) # Loads the entire JSON array from community_data.json

        for i, record in enumerate(data):
            # Each record needs an "index" action with its _id, followed by the document itself.
            # Both must be on a single line, followed by a newline character.

            # Action/Metadata line: Tells Elasticsearch to index a document with a specific ID and INDEX
            # UPDATED: Added "_index": ELASTICSEARCH_INDEX_NAME
            action_line = {"index": {"_index": ELASTICSEARCH_INDEX_NAME, "_id": record["id"]}}
            outfile.write(json.dumps(action_line) + "\n")

            # Document line: The actual JSON document to be indexed
            document_line = record
            outfile.write(json.dumps(document_line) + "\n")

            # FOR DEBUGGING: Print the first few action lines to confirm the format
            if i < 5: # Print only for the first 5 records
                print(f"  Sample action line {i+1}: {json.dumps(action_line)}")


    print(f"Successfully converted. {len(data)} records prepared for bulk indexing.")
    print(f"You can now use '{output_filename}' with your curl command.")

except FileNotFoundError:
    print(f"Error: Input file '{input_filename}' not found. Please ensure it exists.")
except json.JSONDecodeError:
    print(f"Error: Could not decode JSON from '{input_filename}'. Please check its format.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
